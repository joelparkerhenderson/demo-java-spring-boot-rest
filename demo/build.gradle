buildscript {
	ext {
		springBootVersion = '1.3.5.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot' 

jar {
	baseName = 'demo'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')

	/**
	 * To add simple testing, you include Spring Test.
	 *
         * For example, you can write a simple unit test that 
         * mocks the servlet request and response.
         */
	testCompile('org.springframework.boot:spring-boot-starter-test') 
 
	/**
	 * If you are building a web site for your business, 
	 * you probably need to add some management services. 
	 * 
         * Spring Boot provides several out of the box with its 
         * actuator module, such as health, audits, beans, and more.
	 * 
	 * When you restart the app, then you will see a new set 
	 * of RESTful end points added to the application.  
	 * These are management services provided by Spring Boot.
	 *
	 * They include: errors, environment, health, beans, 
         * info, metrics, trace, configprops, and dump.
	 * 
	 * There is a /shutdown endpoint but itâ€™s only visible by default via JMX. 
         * To enable it as an HTTP endpoint, add endpoints.shutdown.enabled=true
         * to your application.properties file.
	 * 
	 * To check the health of the app:
	 * 
	 *     $ curl localhost:8080/health
	 *     {"status":"UP"}
	 */
	compile("org.springframework.boot:spring-boot-starter-actuator")
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}
